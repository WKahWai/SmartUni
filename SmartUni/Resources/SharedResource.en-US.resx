<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="- No data available -" xml:space="preserve">
    <value>- No data available -</value>
  </data>
  <data name="-No data available-" xml:space="preserve">
    <value>-No data available-</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Add new class" xml:space="preserve">
    <value>Add new class</value>
  </data>
  <data name="Add new exam" xml:space="preserve">
    <value>Add new exam</value>
  </data>
  <data name="Add new student" xml:space="preserve">
    <value>Add new student</value>
  </data>
  <data name="Add new subject" xml:space="preserve">
    <value>Add new subject</value>
  </data>
  <data name="Add new tutor" xml:space="preserve">
    <value>Add new tutor</value>
  </data>
  <data name="Add Students" xml:space="preserve">
    <value>Add Students</value>
  </data>
  <data name="Are you sure you want to delete this ?" xml:space="preserve">
    <value>Are you sure you want to delete this?</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Back to List" xml:space="preserve">
    <value>Back to List</value>
  </data>
  <data name="Choose from the left panel to start" xml:space="preserve">
    <value>Choose from the left panel to start</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="Class ID" xml:space="preserve">
    <value>Class ID</value>
  </data>
  <data name="Class Name" xml:space="preserve">
    <value>Class Name</value>
  </data>
  <data name="Classes" xml:space="preserve">
    <value>Classes</value>
  </data>
  <data name="Contact No." xml:space="preserve">
    <value>Contact No.</value>
  </data>
  <data name="Contact No. must be within 10-11 digits." xml:space="preserve">
    <value>Contact No. must be within 10-11 digits.</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Create New" xml:space="preserve">
    <value>Create New</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="Exam" xml:space="preserve">
    <value>Exam</value>
  </data>
  <data name="Exam Description" xml:space="preserve">
    <value>Exam Description</value>
  </data>
  <data name="Examination" xml:space="preserve">
    <value>Examination</value>
  </data>
  <data name="Exams" xml:space="preserve">
    <value>Exams</value>
  </data>
  <data name="Go" xml:space="preserve">
    <value>Go</value>
  </data>
  <data name="Grade" xml:space="preserve">
    <value>Grade</value>
  </data>
  <data name="Home page" xml:space="preserve">
    <value>Home page</value>
  </data>
  <data name="Invalid Email Address" xml:space="preserve">
    <value>Invalid Email Address</value>
  </data>
  <data name="Item" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="Kindly contact Kah Wai if you face any problem." xml:space="preserve">
    <value>Kindly contact Kah Wai if you face any problem.</value>
  </data>
  <data name="Link" xml:space="preserve">
    <value>Link</value>
  </data>
  <data name="Manage classes" xml:space="preserve">
    <value>Manage classes</value>
  </data>
  <data name="Manage exams" xml:space="preserve">
    <value>Manage exams</value>
  </data>
  <data name="Manage settings" xml:space="preserve">
    <value>Manage settings</value>
  </data>
  <data name="Manage students" xml:space="preserve">
    <value>Manage students</value>
  </data>
  <data name="Manage subjects" xml:space="preserve">
    <value>Manage subjects</value>
  </data>
  <data name="Manage tutors" xml:space="preserve">
    <value>Manage tutors</value>
  </data>
  <data name="Mark" xml:space="preserve">
    <value>Mark</value>
  </data>
  <data name="Mark must be within the range 0 and 100." xml:space="preserve">
    <value>Mark must be within the range 0 and 100.</value>
  </data>
  <data name="Mark Registration" xml:space="preserve">
    <value>Mark Registration</value>
  </data>
  <data name="Pick one" xml:space="preserve">
    <value>Pick one</value>
  </data>
  <data name="Register marks" xml:space="preserve">
    <value>Register marks</value>
  </data>
  <data name="Register students" xml:space="preserve">
    <value>Register students</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Selected" xml:space="preserve">
    <value>Selected</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Student" xml:space="preserve">
    <value>Student</value>
  </data>
  <data name="Student has registered the same subject." xml:space="preserve">
    <value>Student has registered the same subject.</value>
  </data>
  <data name="Student ID" xml:space="preserve">
    <value>Student ID</value>
  </data>
  <data name="Student Name" xml:space="preserve">
    <value>Student Name</value>
  </data>
  <data name="Student's Subject" xml:space="preserve">
    <value>Student's Subject</value>
  </data>
  <data name="Students" xml:space="preserve">
    <value>Students</value>
  </data>
  <data name="Study Level" xml:space="preserve">
    <value>Study Level</value>
  </data>
  <data name="Study Status" xml:space="preserve">
    <value>Study Status</value>
  </data>
  <data name="Study Status Description" xml:space="preserve">
    <value>Study Status Description</value>
  </data>
  <data name="Study Status ID" xml:space="preserve">
    <value>Study Status ID</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="Subject ID" xml:space="preserve">
    <value>Subject ID</value>
  </data>
  <data name="Subject Name" xml:space="preserve">
    <value>Subject Name</value>
  </data>
  <data name="Subjects" xml:space="preserve">
    <value>Subjects</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="Term" xml:space="preserve">
    <value>Term</value>
  </data>
  <data name="Total Student" xml:space="preserve">
    <value>Total Student</value>
  </data>
  <data name="Tutor" xml:space="preserve">
    <value>Tutor</value>
  </data>
  <data name="Tutor Name" xml:space="preserve">
    <value>Tutor Name</value>
  </data>
  <data name="Tutor Status" xml:space="preserve">
    <value>Tutor Status</value>
  </data>
  <data name="Tutor Status Description" xml:space="preserve">
    <value>Tutor Status Description</value>
  </data>
  <data name="Tutor Status ID" xml:space="preserve">
    <value>Tutor Status ID</value>
  </data>
  <data name="Tutor Type" xml:space="preserve">
    <value>Tutor Type</value>
  </data>
  <data name="Tutor Type Description" xml:space="preserve">
    <value>Tutor Type Description</value>
  </data>
  <data name="Tutor Type ID" xml:space="preserve">
    <value>Tutor Type ID</value>
  </data>
  <data name="Tutors" xml:space="preserve">
    <value>Tutors</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Year</value>
  </data>
  <data name="Year must be valid integer within the range 2015 and 2025." xml:space="preserve">
    <value>Year must be valid integer within the range 2015 and 2025.</value>
  </data>
</root>